// Generated by CoffeeScript 1.3.3
(function() {
  var $, Dropzone, noOp, without;

  $ = jQuery;

  $.fn.dropzone = function(options) {
    return new Dropzone(this, options);
  };

  XMLHttpRequest.prototype.sendBin = function(datastr) {
    var byteValue, ords, ui8a;
    byteValue = function(x) {
      return x.charCodeAt(0) & 0xff;
    };
    ords = Array.prototype.map.call(datastr, byteValue);
    ui8a = new Uint8Array(ords);
    return this.send(ui8a.buffer);
  };

  without = function(list) {
    var i, newList, withoutList;
    newList = [];
    withoutList = [];
    i = 1;
    while (i < arguments.length) {
      withoutList.push(arguments[i]);
      i++;
    }
    $.each(list, function() {
      if ($.inArray(this, withoutList) === -1) {
        return newList.push(this);
      }
    });
    return newList;
  };

  noOp = function() {};

  Dropzone = (function() {
    var defaultOptions;

    Dropzone.prototype.version = "0.1.6-dev";

    defaultOptions = {
      url: "",
      parallelUploads: 2,
      maxFilesize: 4,
      paramName: "file",
      createImageThumbnails: true,
      maxThumbnailFilesize: 2,
      thumbnailWidth: 120,
      thumbnailHeight: 120,
      fallback: noOp,
      drop: noOp,
      dragStart: noOp,
      dragEnd: noOp,
      dragEnter: noOp,
      dragOver: noOp,
      dragLeave: noOp,
      thumbnail: noOp,
      error: noOp,
      addedFile: noOp,
      processingFile: noOp,
      uploadProgress: noOp,
      finished: noOp,
      accept: function(file) {
        return true;
      }
    };

    function Dropzone(element, options) {
      this.element = $(element);
      this.options = $.extend({}, defaultOptions, options || {});
      this.init();
    }

    Dropzone.prototype.init = function() {
      if (!(window.File && window.FileReader && window.FileList && window.Blob)) {
        this.options.fallback.call(this);
        return;
      }
      this.files = [];
      this.files.queue = [];
      this.files.processing = [];
      this.URL = window.URL || window.webkitURL;
      return this.setupEventListeners();
    };

    Dropzone.prototype.getFallbackForm = function() {
      return $("<form action=\"" + this.options.url + "\" enctype=\"multipart/form-data\" method=\"post\"><input type=\"file\" name=\"newFiles\" multiple=\"multiple\" /><button type=\"submit\">Upload!</button></form>");
    };

    Dropzone.prototype.setupEventListeners = function() {
      var noPropagation, self;
      noPropagation = function(e) {
        e.stopPropagation();
        return e.preventDefault();
      };
      self = this;
      this.element.on("dragstart", function(e) {
        return self.options.dragStart.call(self, e);
      });
      this.element.on("dragenter", function(e) {
        noPropagation(e);
        return self.options.dragEnter.call(self, e);
      });
      this.element.on("dragover", function(e) {
        noPropagation(e);
        return self.options.dragOver.call(self, e);
      });
      this.element.on("dragleave", function(e) {
        return self.options.dragLeave.call(self, e);
      });
      this.element.get(0).addEventListener("drop", (function(e) {
        noPropagation(e);
        self.drop(e);
        return self.options.drop.call(self, e);
      }), false);
      return this.element.on("dragend", function(e) {
        self.options.dragLeave.call(self, e);
        return self.options.dragEnd.call(self, e);
      });
    };

    Dropzone.prototype.drop = function(e) {
      var files;
      if (!e.dataTransfer) {
        return;
      }
      files = e.dataTransfer.files;
      if (files.length) {
        return this.handleFiles(files);
      }
    };

    Dropzone.prototype.handleFiles = function(files) {
      var self;
      self = this;
      $.each(files, function() {
        if (self.accept(this)) {
          return self.addFile(this);
        }
      });
      return this.processQueue();
    };

    Dropzone.prototype.accept = function(file) {
      return this.options.accept.call(this, file);
    };

    Dropzone.prototype.addFile = function(file) {
      this.files.push(file);
      this.files.queue.push(file);
      this.options.addedFile.call(this, file);
      if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1024 * 1024) {
        return this.createThumbnail(file);
      }
    };

    Dropzone.prototype.createThumbnail = function(file) {
      var blobUrl, img, self;
      self = this;
      img = new Image();
      blobUrl = this.URL.createObjectURL(file);
      img.onerror = img.onabort = function() {
        self.URL.revokeObjectURL(blobUrl);
        return img = null;
      };
      img.onload = function() {
        var canvas, ctx, srcRatio, thumbnail, trgHeight, trgRatio, trgWidth, trgX, trgY;
        canvas = document.createElement("canvas");
        ctx = canvas.getContext("2d");
        trgX = 0;
        trgY = 0;
        trgWidth = 0;
        trgHeight = 0;
        srcRatio = void 0;
        trgRatio = void 0;
        canvas.width = self.options.thumbnailWidth;
        canvas.height = self.options.thumbnailHeight;
        srcRatio = img.width / img.height;
        trgRatio = canvas.width / canvas.height;
        if (srcRatio > trgRatio) {
          trgWidth = canvas.width;
          trgHeight = trgWidth / srcRatio;
        } else {
          trgHeight = canvas.height;
          trgWidth = trgHeight * srcRatio;
        }
        trgX = (canvas.width - trgWidth) / 2;
        trgY = (canvas.height - trgHeight) / 2;
        ctx.drawImage(img, trgX, trgY, trgWidth, trgHeight);
        thumbnail = canvas.toDataURL("image/png");
        self.options.thumbnail(file, thumbnail);
        self.URL.revokeObjectURL(blobUrl);
        return img = null;
      };
      return img.src = blobUrl;
    };

    Dropzone.prototype.processQueue = function() {
      var i, parallelUploads, processingLength;
      parallelUploads = this.options.parallelUploads;
      processingLength = this.files.processing.length;
      i = processingLength;
      while (i < parallelUploads) {
        if (!this.files.queue.length) {
          return;
        }
        this.processFile(this.files.queue.shift());
        i++;
      }
    };

    Dropzone.prototype.processFile = function(file) {
      var fileReader, self;
      fileReader = new FileReader();
      self = this;
      this.files.processing.push(file);
      this.options.processingFile.call(this, file);
      if (file.size > this.options.maxFilesize * 1024 * 1024) {
        return this.errorProcessing(file, "File is too big (" + (Math.round(file.size / 1024 / 10.24) / 100) + "MB). Max filesize: " + this.options.maxFilesize + "MB");
      } else {
        return this.uploadFile(file);
      }
    };

    Dropzone.prototype.uploadFile = function(file) {
      var formData, self, xhr;
      xhr = new XMLHttpRequest();
      self = this;
      formData = new FormData();
      formData.append(this.options.paramName, file);
      xhr.open("POST", this.options.url, true);
      $(xhr).on("load", function(e) {
        self.options.uploadProgress(file, 100);
        return self.finished(file, e);
      }).on("error", function() {
        return self.errorProcessing(file);
      });
      if (xhr.upload) {
        $(xhr.upload).on("progress", function(e) {
          var oe;
          oe = e.originalEvent;
          return self.options.uploadProgress(file, Math.max(0, Math.min(100, (oe.loaded / oe.total) * 100)));
        });
      } else {
        $(xhr).on("progress", function(e) {
          var oe;
          oe = e.originalEvent;
          return self.options.uploadProgress(file, Math.max(0, Math.min(100, (oe.loaded / oe.total) * 100)));
        });
      }
      xhr.setRequestHeader("Accept", "application/json");
      xhr.setRequestHeader("Cache-Control", "no-cache");
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
      xhr.setRequestHeader("X-File-Name", file.name);
      return xhr.send(formData);
    };

    Dropzone.prototype.finished = function(file) {
      this.files.processing = without(this.files.processing, file);
      this.options.finished.call(this, file);
      return this.processQueue();
    };

    Dropzone.prototype.errorProcessing = function(file, message) {
      this.files.processing = without(this.files.processing, file);
      this.options.error.call(this, file, message);
      return this.processQueue();
    };

    return Dropzone;

  })();

}).call(this);
